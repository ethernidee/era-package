<html><head><LINK href=../other/styles.css rel=stylesheet type=text/css><base target=_self></head>
<script src=../other/scripts.js></script>
<body background=../images/intile.jpg bgproperties=fixed>
<p align=center><b><font face=Times New Roman CE>
<font size=6>V<font size=5>ARIABLES</font> (VR)</font><br><font face=Arial size=2 color=#333333>RECEIVER</font>
<p><font face=Arial size=2 color=#333333><b>Used for managing variables (setting, comparing and doing math with them)</font>.</b></font></p><p></p>
<p><font face=Arial size=2>For a more detailed and explained version of VR receiver and variables, read <a href=../other/tutor_r1.htm#howto4>the VR receiver easily explained</a> (ERM for dummies, by Qurqirish Dragon)</font></p>
<table border=2 bordercolorlight=black bordercolordark=black width=100% cellspacing=1>
      <tr>
        <td nowrap valign=top><b><font class=ermtext>!!VR<font class=param>@</font>:<font class=param>XXXX</font>;</font></b></td>
        <td valign=top><font face=Arial size=2>
 <i>All numeric variables are integer variables and have a range of -2147483647...+2147483647</i><br>
 <table cellspacing=0>
 <tr><td><td><b>e1..e100  </td><td> Function floating point variables</td></tr>
 <tr><td><td><b>e-1..e-100</td><td> Trigger local floating point variables</td></tr>
 <tr><td><td><b>'f'..'t'  </td><td> Standard variables ('quick variables')</td></tr>
 <tr><td><td><b>v1..v1000 </td><td> Standard variables</td></tr>
 <a name=heroVars></a>
 <tr><td><td><b>w1..w100  </td><td> Hero variables</td></tr>
 <tr><td><td><b>w101..w200</td><td> Hero variables</td></tr>
 <tr><td><td><b>x1..x16   </td><td> Function parameters</td></tr>
 <tr><td><td><b>y1..y100  </td><td> Function local variables</td></tr>
 <tr><td><td><b>y-1..y-100</td><td> Trigger-based local integer variables</td></tr>
 <tr><td><td><b>z1..z1000 </td><td> String variables</td></tr>
 <tr><td><td><b>z-1..z-10 </td><td> Function local string variables</td></tr>
 </table></td>
</tr>
<tr><td align=center colspan=2 class=rowforoptions><font face=Arial size=2><br><b>OPTIONS</b><br><br></font></td></tr>
<tr><td valign=top><b>var<br><font class=ermtext><a name=C></a>C<font class=param>$1</font>/<font class=param>$2</font>/<font class=param>$3</font>...</font></b><br>&nbsp;&nbsp;up to 16 parameters</td>
 <td  valign=top><b>Set/check v vars.</b><br>
 &nbsp;&nbsp; <font class=param>@</font> - v variable that is first in sequence<br>
 &nbsp;&nbsp; <font class=param>$1</font> - set/check a first (<font class=param>@</font>) v variable<br>
 &nbsp;&nbsp; <font class=param>$2</font> - set/check a second (<font class=param>@+1</font>) v variable<br>
 &nbsp;&nbsp; <font class=param>$3</font> - set/check a third (<font class=param>@+2</font>) v variable<br>
 ... and so on ...<br>
 <font class=example>Example:</font>!!VRv123:C23/v15/?i/y4;<br></font>
 <font class=example>Result:</font> v123=23, v124=v15, i=v125, v126=y4<br><br>
 VR:C command can be used to define tables; it's a much cleaner way to do stuff like look up a spell number.<br>
 <font class=example>Example:</font>
 <script type="erm">ZVSE
!!VRv600:C0/3/5/15/27/31/32/35/37/41/42/43/46/53/54; [table of 1st level spell numbers]
!!VRy1:S600 R14; [random # 600-614]
!!VRvx16:Svy1; [now vx16 is a random 1st level spell number]</script>
 </b></td></tr>
<tr><td valign=top><b>string<br><font class=ermtext><a name=H></a>H<font class=param>#</font></font></b></td>
 <td><b>Checks whether @ stores an empty string or not</b><br>
 &nbsp;&nbsp; <font class=param>#</font> is a number of flag to store the result<br>
 &nbsp;&nbsp; &nbsp;&nbsp;flag<font class=param>#</font>=1 if there is a text<br>
 &nbsp;&nbsp; &nbsp;&nbsp;flag<font class=param>#</font>=0 if string is empty.<br>
 All signs like Space, New Line, Carriage Return, Tabulation are skipped and treated as NO characters.<br>
 <font class=example>Example:</font><br>
 <script type="erm">ZVSE
!!VRz100:S^Hello!^;
!!VRz101:S^^;
!!VRz102:S^ ^;
!!VRz100:H300; flag300=1
!!VRz101:H301; flag301=0
!!VRz102:H302; flag302=0</script>
 </td></tr>
<tr><td valign=top><b>string<br><font class=ermtext><a name=M></a>M<font class=param>1</font>/z<font class=param>#1</font>/<font class=param>#2</font>/<font class=param>#3</font></td>
 <td><b>Get a substring.</b><br>
 &nbsp;&nbsp; <font class=param>@</font>  - a variable that receives the result; may be standard or local z variable.<br>
 &nbsp;&nbsp; <font class=param>z#1</font> - a variable that is a source; may be standard, local or extended z variable.<br>
 &nbsp;&nbsp; <font class=param>#2</font>  - start position of <font class=ermtext>z<font class=param>#1</font></font> string to copy (0 based).<br>
 &nbsp;&nbsp; <font class=param>#3</font>  - length of substring to copy.<br>
 <font class=example>Example:</font>
 <script type="erm">ZVSE
!!VRz1:S^NTV PLUS for Heroes!^;
!!VRz2:M1/z1/4/7; In result we have z2=PLUS fo</script>
 </td></tr>
<tr><td valign=top><b>string<br><a name=m2></a><font class=ermtext>M<font class=param>2</font>/z<font class=param>#1</font>/<font class=param>#2</font></td>
 <td><font face=Arial size=2>
 <b>Get a specific token #2 from z#1 and set it to @</b>.<br>
 &nbsp;&nbsp; <font class=param>@</font> - a variable that receives the result; may be standard or local <b>z</b> variable.<br>
 &nbsp;&nbsp; <font class=param>z#1</font> - a variable that is a source; may be standard, local or extended <b>z</b> variable.<br>
 &nbsp;&nbsp; <font class=param>#2</font> - a token number (starting from 0).<br>
 <font class=notes>Comments:</font><br>Delimiters are: space, comma, dot, tabulator, new line.<br>
 <font class=example>Example:</font><br>For a string:<br>
 <font color=blue> A string.of ,,tokens<br> and some  more tokens</font><br>
 We have the next tokens:<br>
 &nbsp;&nbsp; 0 -> A<br>&nbsp;&nbsp; 1 -> string<br>&nbsp;&nbsp; 2 -> of<br>&nbsp;&nbsp; 3 -> tokens<br>
 &nbsp;&nbsp; 4 -> and<br>&nbsp;&nbsp; 5 -> some<br>&nbsp;&nbsp; 6 -> more<br>&nbsp;&nbsp; 7 -> tokens<br></td></tr>
<tr><td valign=top><a name=m3></a><b>string<br><font class=ermtext>M</font><font class=param>3</font>/<font class=param>#1</font>/<font class=param>#2</font><br>
 M<font class=param>3</font>/<font class=param>#1</font></td>
 <td><b>Integer to alpha conversion.</b><br>
 Convert a number to a string.<br>
 &nbsp;&nbsp; <font class=param>@</font> - a variable that receives the result; may be standard or local <b>z</b> variable.<br>
 &nbsp;&nbsp; <font class=param>#1</font> - any number (or any numeric variable) to be converted.<br>
 &nbsp;&nbsp; <font class=param>#2</font> - radix; a base of a value (default is 10)<br>
 <font class=example>Example:</font>
 <script type="erm">ZVSE
!!VRz1:M3/123; -> z1=123
!!VRz1:M3/123/10; -> z1=123 (the same as above)
!!VRz1:M3/-123;-> z1=-123
!!VRz1:M3/127/16; -> z1=0x7F (hexadecimal)</script>
 </td></tr>
<tr><td valign=top><a name=m4></a><b>string<br><font class=ermtext>M</font><font class=param>4</font>/<font class=param>$</font> </td>
 <td valign=top><b>Get the length of a string.</b><br>
 &nbsp;&nbsp; <font class=param>$</font> - any numerical variable (to store the length)<br>
 <font class=notes>Comment:</font> Includes the full length, including leading and trailing spaces.<br>
 <font class=example>Example:</font>
 <script type="erm">ZVSE
!!VRz10:S^  Abc def   ^;  Assign text to string z10
!!VRz10:M4/y5; Get length to y5. y5 returns 12</script>
 </td></tr>
<tr><td valign=top><a name=m5></a><b>string<br><font class=ermtext>M<font class=param>5</font>/<font class=param>$</font> </td>
 <td  height=48 valign=top>
 <b>Get the first non-space character position.</b><br>
 &nbsp;&nbsp; <font class=param>$</font> - any numerical variable (to store the position)<br>
 <font class=notes>Comment:</font> If there are no leading spaces, the position is 0. If the string is empty, the position is -1.<br>
 <font class=example>Example:</font>
 <script type="erm">ZVSE
!!VRz10:S^ Abc def ^; Assign text to string z10
!!VRz10:M5/y6; Get 1st non-space position to y6. y6 returns 2.</script>
 </td></tr>
<tr><td valign=top><a name=m6></a><b>string<br><font class=ermtext>M<font class=param>6</font>/<font class=param>$</font> </td>
 <td><b>Get the last non-space character position.</b><br>
 &nbsp;&nbsp; <font class=param>$</font> - any numerical variable (to store the position)<br>
 <font class=notes>Comment:</font> If there are no trailing spaces, the position is the length of the string -1. If the string is empty, the position is 0.<br>
 <font class=example>Example:</font>
 <script type="erm">ZVSE
!!VRz10:S^ Abc def ^; Assign text to string z10
!!VRz10:M6/y7; Get last non-space position to y7. y7 returns 8.</script>
 </td></tr>
<tr><td valign=top><b>var<br><a name=r></a><font class=ermtext>R<font class=param>$</font></font></td>
 <td valign=top><b>Generate a random value from 0 to $ (inclusive) and ADD this to the current value.</b><br>
 <font class=example>Example:</font>
<script type="erm">ZVSE
!!VRi:R25; will generate a random value from 0 to x (including) and ADD this to the current value </script> </td></tr>
<tr><td valign=top><a name=rf></a><b>var<br><font class=ermtext>R<font class=param>#</font>/<font class=param>$</td>
 <td><b>Set random generator seed as one value on all PCs.</b><br>
 &nbsp;&nbsp; <font class=param>#</font> - dummy parameter (is not used)<br>
 &nbsp;&nbsp; <font class=param>$</font> - random seed to set a random generator to a fixed sequence.<br>
 <font class=notes>Comment:</font><br>If you are not sure that the random generator is in identical stage at both PCs, you may just reset it to an identical seed and then generate a number.</td></tr>
<tr><td valign=top><b>var<br><font class=ermtext><a name=s></a>S<font class=param>#</font></font><br>string<br><font class=ermtext>S^<font class=param>text</font>^</font></b></td>
 <td><b>Set var <font class=param>@</font> to <font class=param>#</font> or set string <font class=param>@</font> to <font class=param>text</font> (text may be formatted)</b></td></tr>
<tr><td valign=top><b>var<BR><a name=t></a><font class=ermtext>T<font class=param>$</font></font></b></td>
 <td><b>Generate a random value from 0 to $ and add this to the current value of the variable</b><br>Random value based on time value. In some cases these values may be more &quot;random&quot; than with the <font class=ermtext>R</font> command.<br><font class=notes>Comments:</font><br>Also, for those of you using <font class=ermtext>VR:T</font> to generate random numbers: if you generate more than one number at once, they'll all be the same. So use <font class=ermtext>VR:R</font> in those situations.<br><font class=ermtext>T</font> is a time based command. And if they both meet at one command line it is too little delay between them and as a result the values are the same.</td></tr>
<tr><td valign=top><a name=u></a><b>string<br><font class=ermtext>U<font class=param>#</font></font> <br><font class=ermtext>U^<font class=param>text</font>^</font> </td>
 <td valign=top><b>Search for a substring within a string</b><br>
 Searches for the substring <font class=ermtext>z<font class=param>#</font></font> or <font class=param>Text</font> within the <font class=param>@</font> string and sets Flag <font class=param>1</font> to TRUE if there is such a substring, otherwise to FALSE.<br>
 Z var in both sides may be of any type (standard, local, ERT based). This mean that this command may be easily ERTified.<br>
 <font class=notes>Comments:</font><br>
 This uses a case insensitive algorithm, so &quot;Sword&quot; equals &quot;sword&quot; and &quot;SwOrD&quot;. It skips leading and trailing spaces (and new line characters), so &quot; Hi &quot;, &quot; hI&quot; and &quot; hi &quot; all means just &quot;HI&quot; (all translated to upper case before searching).<br>
 It does not skip any space or new line characters that are located inside of the text. So &quot;Hi,&nbsp;it's me&quot; and &quot;Hi,&nbsp;&nbsp;&nbsp;it's me&quot; are different.<br>
 Both strings are processed before search procedure is executed. So the text like this &quot;Hi,%Z5!&quot; will become &quot;Hi,Slava!&quot; (if z5 is set to &quot;Slava&quot;) before processing.<br>
 <font class=example>Example:</font><br>
 <script type="erm">ZVSE
; Here you will have both messages 'Yes!' and 'Yes again!'
!#VRz100:S^ Sword^;
!#VRz200:S^This_is the_sword text^;
!#VRz200:Uz100;
!#IF&1:M^Yes!^;
!#VRz200:U^sWorD^;
!#IF&1:M^Yes again!^; </script>
 </font></td></tr>
<tr><td valign=top><a name=v></a><B>var<br><font class=ermtext>Vz<font class=param>$</font> </font></td>
 <td><b>Convert a string to an integer or floating point value</b><br>
 &nbsp;&nbsp; <font class=param>@</font> is any integer (<b>f...t,v#,w#,x#,y#</b>) or floating point (e) variable.<br>
 &nbsp;&nbsp; <font class=ermtext>z<font class=param>$</font></font> - a var that is a source; may be standard, local or extended z<br>
 <font class=notes>Comments:</font><br>
 You may use a ...e... syntax (engineering fl.p. format).<br>If value may not be converted it is set to 0.<br>Leading or trailing space characters are ignored.<br>
 <font class=example>Example:</font>
 <script type ="erm">ZVSE
 !!VRz1:S^123^;
 !!VRv1:Vz1; v1 = 123
 !!VRz1:S^+123^;
 !!VRv1:Vz1; v1 = 123
 !!VRz1:S^-123^;
 !!VRv1:Vz1;v1 = -123
 !!VRz1:S^.325^;
 !!VRe1:Vz1;e1 = 0.325
 !!VRz1:S^-1.25e+1^;
 !!VRe1:Vz1;e1 = -12.5 (-1.25 * 10^1) </script>
 </td></tr>
<tr><td class=rowforoptions colspan=2 align=center><a name=bits></a><font face=Arial size=2><br><b>LOGICAL BIT OPERATIONS</b><br><br></font></td></tr>
<tr><td valign=top><font class=ermtext>&<font class=param>#</font></font></td>
 <td><b>Check or remove specific bit of a variable</b><br>
 &nbsp;&nbsp;<font class=ermtext>&</font> does a logical AND on the bits of a variable and can be used to check if a specific bit has been set. For example, to test if the variable v1 has the 5th bit (16) set, <nobr>use: <font class=ermtext>!!VR<font class=param>v1</font>:&<font class=param>16</font>;</font></nobr>
 v1 will be set to 16 if bit 5 is set and 0 if it isn't. This can be very useful when checking monster flags.<br>
 <font class=example>Example:</font><br>
 <script type="erm">ZVSE
!!BRx16:F?i; read flags
!!VRi:&33554432; just look at waiting bit
!!IF&i>0:M^This stack is waiting.^; 
;You can also clear (remove) a specific bit without touching the other bits in a variable.
; To do so, use the negative minus one of the bit value you wish to remove.
;For example, to remove the 5th bit (16), use -17, e.g.,
!!VRv1:&-17;
;To check or unset several bits at once sum their values.
;E.g. to remove 4th(8), 3rd(4) and 1st(1) bits use &-14 ( =-1*(8+3+1)-1 ).
!!VRv1:&-14;
;To check them use &13
!!VRv1:&13;</script>
 </b></font></td></tr>
<tr><td valign=top><font class=ermtext>|<font class=param>#</font></font></td>
 <td valign=top><b>Set a specific bit of a variable</b><br>
 &nbsp;&nbsp; <font class=ermtext>|</font> does a logical OR on the bits of a variable and can be used to set a specific bit without changing the other bits. For example, to set the 6th bit (32) for v1, <nobr>use: <font class=ermtext>!!VR<font class=param>v1</font>:|<font class=param>32</font>;</font></nobr><br>
 &nbsp;&nbsp;If v1 already had this bit set, nothing is changed. If it didn't, it now has this bit set. This can be very useful for adding new flags to a monster if you don't know which ones it already has, and in fact, this is really the only completely safe way to do so.<br>
 To set several bits at once sum their values. E.g. to set 5th(16) and 3rd(4) bits use <font class=ermtext>|<font class=param>20</font></font></td></tr>
<tr><td valign=top><font class=ermtext>X<font class=param>$</font></font></td>
 <td><b>Does a logical XOR on a bits of a variable</b><br>
 E.g. <font class=ermtext>X<font class=param>-1</font></font> will invert bits of a variable.<br>
 To check for difference between two variables use syntax :<font class=ermtext>VR<font class=param>@</font>:X<font class=param>$</font></font> , where <font class=param>@</font> is variable which is one of variables to compare and also will keep the result of comparison. <font class=param>$</font> is second comparing variable.<br>
 <font class=example>Example:</font><br>
 <script type="erm">ZVSE
!!VRv1:S163; (10100011)
!!VRv2:S106; (01101010)
!!VRv1:Xv2; v1 is 201 (11001001) v2 is still 106.
;explanation:
;___10100011
;___01101010
;XOR--------
;___11001001
; </script>
<tr><td class=rowforoptions colspan=2 align=center><a name=ariphm></a><font face=Arial size=2><br><b>ARITHMETIC OPERATIONS WITH VARIABLES</b><br><br></font></td></tr>
<tr><td valign=top><b>var<br><font class=ermtext>+<font class=param>#</font></font><br>string<br><font class=ermtext>+^<font class=param>text</font>^</font></b></td>
 <td valign=center><b>Add <font class=param>#</font> to the variable<br>or<br>add the <font class=param>text</font> to the end of the source string</td></tr>
<tr><td><b>var<br><font class=ermtext>-<font class=param>#</font></font></b></td>
 <td><b>Subtract <font class=param>#</font> from the variable</b></td></tr>
<tr><td valign=top><b>var<br><font class=ermtext>*<font class=param>#</font></font></b></td>
 <td valign=center><b>Multiply the variable by <font class=param>#</font></b></font></td></tr>
<tr><td valign=top><b>var<br><font class=ermtext>:<font class=param>#</font></font></b></td>
 <td><b>Divide the variable by <font class=param>#</font></b> (do not divide by zero - you will get an error message)</td></tr>
<tr><td valign=top><b>var<br><font class=ermtext>%<font class=param>#</font></font></b></td>
 <td valign=top><b>Set the variable to the reminder from division by <font class=param>#</font></b><br>No brackets please :-)</td></tr>
</table>
<script>
document.write("<table cellspacing=0 cellpadding=0 width=100% border=0><tr><td align=right><font face=arial size=1>"
+"Last update:"+document.lastModified+"</font></td></tr></table>");
</script></body>

<script src="../other/erm.js"></script> 
<link rel="stylesheet" type="text/css" href="../other/erm.css"/>

</html>